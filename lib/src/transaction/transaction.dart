import 'package:json_annotation/json_annotation.dart';
import 'package:mubrambl/src/core/amount.dart';
import 'package:mubrambl/src/credentials/address.dart';
import 'package:mubrambl/src/model/box/asset_code.dart';
import 'package:mubrambl/src/model/box/token_value_holder.dart';

part 'transaction.g.dart';

class Transaction {
  /// Type of proposition, eg., PublicKeyCurve25519, ThresholdCurve25519, PublicKeyEd25519
  final String propositionType;

  /// The address of the sender/s of this transaction.
  ///
  /// This can be set to null, in which case the client will use the address
  /// belonging to the credentials used to this transaction.
  final List<ToplAddress>? senders;

  /// The recipient of the returned UTXOs from poly transactions including
  /// left-over network fees
  ///
  /// If [changeAddress] is `null`, this library will refer to the address
  /// belonging to the credentials used to sign this transaction
  final ToplAddress? changeAddress;

  /// The maximum amount of polys to spend on the network fee.
  ///
  /// If [fee] is `null`, this library will refer to the defaults
  /// for the given network
  ///
  /// Polys that are not used but included in [fee] will be returned to the
  /// changeAddress.
  final PolyAmount? fee;

  /// Data string which can be associated with this transaction (may be empty)
  final String? data;

  Transaction(
      {required this.propositionType,
      this.senders,
      this.fee,
      this.changeAddress,
      this.data});

  Transaction copyWith(
      {List<ToplAddress>? senders,
      List<ToplAddress>? recipients,
      String? propositionType,
      ToplAddress? changeAddress,
      PolyAmount? fee,
      String? data}) {
    return Transaction(
        senders: senders ?? this.senders,
        changeAddress: changeAddress ?? changeAddress,
        propositionType: propositionType ?? this.propositionType,
        fee: fee ?? this.fee,
        data: data ?? this.data);
  }
}

@JsonSerializable(checked: true, explicitToJson: true)
class PolyTransaction extends Transaction {
  /// The recipient of this transaction
  ///
  /// This is a required field. Each recipient must have an associated PolyAmount that will be transferred to the recipient
  final Map<String, SimpleValue> to;

  @override
  @PolyAmountNullableConverter()
  final PolyAmount? fee;

  PolyTransaction(
      {required this.to,
      senders,
      required propositionType,
      changeAddress,
      this.fee,
      data})
      : super(
            senders: senders,
            propositionType: propositionType,
            changeAddress: changeAddress,
            fee: fee,
            data: data);

  PolyTransaction copy(
      {required Map<String, SimpleValue> to,
      List<ToplAddress>? from,
      String? propositionType,
      ToplAddress? changeAddress,
      PolyAmount? fee,
      String? data}) {
    return PolyTransaction(
        propositionType: propositionType,
        senders: senders,
        to: to,
        changeAddress: changeAddress,
        fee: fee,
        data: data);
  }

  /// A necessary factory constructor for creating a new PolyTransaction instance
  /// from a map. Pass the map to the generated `_$PolyTransactionFromJson()` constructor.
  /// The constructor is named after the source class, in this case, PolyTransaction.
  factory PolyTransaction.fromJson(Map<String, dynamic> json) =>
      _$PolyTransactionFromJson(json);

  /// `toJson` is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method `_$PolyTransactionToJson`.
  Map<String, dynamic> toJson() => _$PolyTransactionToJson(this);
}

@JsonSerializable(checked: true, explicitToJson: true)
class AssetTransaction extends Transaction {
  /// The recipient of this transaction
  ///
  /// This is a required field. Each recipient must have an associated AssetValue that will be transferred to the recipient
  final Map<String, AssetValue> to;

  /// The recipient of the change from the assetTransaction
  ///
  /// This field can be set to null. If set to null, the BramblClient will use the address generated by the Credential used to sign this transaction as the consolidationAddress
  @ToplAddressNullableConverter()
  final ToplAddress? consolidationAddress;

  /// The minting parameter for asset transactions.
  final bool minting;

  /// The encoded assetCode that the user wants to include on teh asset box
  final AssetCode assetCode;

  @override
  @PolyAmountNullableConverter()
  final PolyAmount? fee;

  AssetTransaction(
      {required this.to,
      senders,
      required propositionType,
      changeAddress,
      this.fee,
      data,
      required this.minting,
      this.consolidationAddress,
      required this.assetCode})
      : super(
            senders: senders,
            propositionType: propositionType,
            changeAddress: changeAddress,
            fee: fee,
            data: data);

  AssetTransaction copy(
      {required Map<String, AssetValue> to,
      List<ToplAddress>? from,
      String? propositionType,
      ToplAddress? changeAddress,
      PolyAmount? fee,
      String? data,
      required bool minting,
      ToplAddress? consolidationAddress,
      required AssetCode assetCode}) {
    return AssetTransaction(
        propositionType: propositionType,
        senders: senders,
        to: to,
        changeAddress: changeAddress,
        fee: fee,
        data: data,
        minting: minting,
        consolidationAddress: consolidationAddress,
        assetCode: assetCode);
  }

  /// A necessary factory constructor for creating a new AssetTransaction instance
  /// from a map. Pass the map to the generated `_$AssetTransactionFromJson()` constructor.
  /// The constructor is named after the source class, in this case, AssetTransaction.
  factory AssetTransaction.fromJson(Map<String, dynamic> json) =>
      _$AssetTransactionFromJson(json);

  /// `toJson` is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method `_$AssetTransactionToJson`.
  Map<String, dynamic> toJson() => _$AssetTransactionToJson(this);
}

@JsonSerializable(checked: true, explicitToJson: true)
class ArbitTransaction extends Transaction {
  /// The recipient of this transaction
  ///
  /// This is a required field. Each recipient must have an associated SimpleValue that will be transferred to the recipient
  final Map<String, SimpleValue> to;

  /// The recipient of the change from the arbitTransaction
  ///
  /// This field can be set to null. If set to null, the BramblClient will use the address generated by the Credential used to sign this transaction as the consolidationAddress
  @ToplAddressNullableConverter()
  final ToplAddress? consolidationAddress;

  @override
  @PolyAmountConverter()
  final PolyAmount fee;

  ArbitTransaction(
      {required this.to,
      senders,
      required propositionType,
      changeAddress,
      required this.fee,
      data,
      this.consolidationAddress})
      : super(
            senders: senders,
            propositionType: propositionType,
            changeAddress: changeAddress,
            fee: fee,
            data: data);

  ArbitTransaction copy(
      {required Map<String, SimpleValue> to,
      @ToplAddressNullableConverter() List<ToplAddress>? from,
      String? propositionType,
      @ToplAddressNullableConverter() ToplAddress? changeAddress,
      PolyAmount? fee,
      String? data,
      required bool minting,
      @ToplAddressNullableConverter() ToplAddress? consolidationAddress,
      required AssetCode assetCode}) {
    return ArbitTransaction(
        propositionType: propositionType,
        senders: senders,
        to: to,
        changeAddress: changeAddress,
        fee: fee,
        data: data,
        consolidationAddress: consolidationAddress);
  }

  /// A necessary factory constructor for creating a new ArbitTransaction instance
  /// from a map. Pass the map to the generated `_$ArbitTransactionFromJson()` constructor.
  /// The constructor is named after the source class, in this case, ArbitTransaction.
  factory ArbitTransaction.fromJson(Map<String, dynamic> json) =>
      _$ArbitTransactionFromJson(json);

  /// `toJson` is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method `_$ArbitTransactionToJson`.
  Map<String, dynamic> toJson() => _$ArbitTransactionToJson(this);
}
