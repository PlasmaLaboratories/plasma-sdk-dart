import 'dart:typed_data';

import 'package:mubrambl/src/credentials/seed.dart';
import 'package:mubrambl/src/credentials/x_prv.dart';
import 'package:test/test.dart';

final D1 = Uint8List.fromList([
  0xf8,
  0xa2,
  0x92,
  0x31,
  0xee,
  0x38,
  0xd6,
  0xc5,
  0xbf,
  0x71,
  0x5d,
  0x5b,
  0xac,
  0x21,
  0xc7,
  0x50,
  0x57,
  0x7a,
  0xa3,
  0x79,
  0x8b,
  0x22,
  0xd7,
  0x9d,
  0x65,
  0xbf,
  0x97,
  0xd6,
  0xfa,
  0xde,
  0xa1,
  0x5a,
  0xdc,
  0xd1,
  0xee,
  0x1a,
  0xbd,
  0xf7,
  0x8b,
  0xd4,
  0xbe,
  0x64,
  0x73,
  0x1a,
  0x12,
  0xde,
  0xb9,
  0x4d,
  0x36,
  0x71,
  0x78,
  0x41,
  0x12,
  0xeb,
  0x6f,
  0x36,
  0x4b,
  0x87,
  0x18,
  0x51,
  0xfd,
  0x1c,
  0x9a,
  0x24,
  0x73,
  0x84,
  0xdb,
  0x9a,
  0xd6,
  0x00,
  0x3b,
  0xbd,
  0x08,
  0xb3,
  0xb1,
  0xdd,
  0xc0,
  0xd0,
  0x7a,
  0x59,
  0x72,
  0x93,
  0xff,
  0x85,
  0xe9,
  0x61,
  0xbf,
  0x25,
  0x2b,
  0x33,
  0x12,
  0x62,
  0xed,
  0xdf,
  0xad,
  0x0d,
]);

final D1_H0 = Uint8List.fromList([
  0x60,
  0xd3,
  0x99,
  0xda,
  0x83,
  0xef,
  0x80,
  0xd8,
  0xd4,
  0xf8,
  0xd2,
  0x23,
  0x23,
  0x9e,
  0xfd,
  0xc2,
  0xb8,
  0xfe,
  0xf3,
  0x87,
  0xe1,
  0xb5,
  0x21,
  0x91,
  0x37,
  0xff,
  0xb4,
  0xe8,
  0xfb,
  0xde,
  0xa1,
  0x5a,
  0xdc,
  0x93,
  0x66,
  0xb7,
  0xd0,
  0x03,
  0xaf,
  0x37,
  0xc1,
  0x13,
  0x96,
  0xde,
  0x9a,
  0x83,
  0x73,
  0x4e,
  0x30,
  0xe0,
  0x5e,
  0x85,
  0x1e,
  0xfa,
  0x32,
  0x74,
  0x5c,
  0x9c,
  0xd7,
  0xb4,
  0x27,
  0x12,
  0xc8,
  0x90,
  0x60,
  0x87,
  0x63,
  0x77,
  0x0e,
  0xdd,
  0xf7,
  0x72,
  0x48,
  0xab,
  0x65,
  0x29,
  0x84,
  0xb2,
  0x1b,
  0x84,
  0x97,
  0x60,
  0xd1,
  0xda,
  0x74,
  0xa6,
  0xf5,
  0xbd,
  0x63,
  0x3c,
  0xe4,
  0x1a,
  0xdc,
  0xee,
  0xf0,
  0x7a,
]);

void main() {
  group('Key Derivation Tests', () {
    test('seed cases', () {
      final bytes = Uint8List.fromList([
        0xe3,
        0x55,
        0x24,
        0xa5,
        0x18,
        0x03,
        0x4d,
        0xdc,
        0x11,
        0x92,
        0xe1,
        0xda,
        0xcd,
        0x32,
        0xc1,
        0xed,
        0x3e,
        0xaa,
        0x3c,
        0x3b,
        0x13,
        0x1c,
        0x88,
        0xed,
        0x8e,
        0x7e,
        0x54,
        0xc4,
        0x9a,
        0x5d,
        0x09,
        0x98,
      ]);
      final seed = Seed.from_bytes(bytes);
      expect(() => seed_xprv_eq(seed, D1), returnsNormally);
    });

    test('derive xPrv', () {
      final prv = XPrv.from_bytes_verified(D1);
      expect(() => derive_xprv_eq(prv, 0x80000000, D1_H0), returnsNormally);
    });

    test('derive_hardened', () {
      final derivation_index = 0x1;
      final seed = Seed.from_bytes(Uint8List(32));
      final xPrv = XPrv.generate_from_seed(seed.as_ref);
      expect(() => xPrv.derive_child(derivation_index), returnsNormally);
    });
  });
}

void derive_xprv_eq(XPrv parent_xprv, int idx, Uint8List expected_xprv) {
  final child_xprv = parent_xprv.derive_child(idx);
  compare_xprv(child_xprv.as_ref, expected_xprv);
}
